test

flutter é um framework escrito em dart

tudo é um widget no flutter 
framework reativo moderno 
assicrona
animções em flutter são bem rapidas 
webview não é tao boa

xamarin é transformado (tradução para nativo) desenvolve em c# e transforma
muito trabalhoso para fazer os elementos visuais 
precisa fazer muito codigo para fazer animações ou layout bonito 

react native (facebook)
muito bem avaliado, muito parecido com aplicativo nativo 

Ionic(drifty.co)
perdeu espaço para o flutter 

pioneiro (Apache Cordova)
apps nativos nao tem comparação 
o nativo é mais rapido, em telas, renderização, layouts 

o nativo tem o problema do custo (ter duas pessoas android ou ios)

em comunidade empata(nativoXhibrido)
visual do nativo é mais rapido(pq esta direto no so, sendo mais fluido)

empate no aprendizado

nativo ganha em recursos do aparelho
pra acessar recursos o hibrido usa o nativo para fazer isso 
baixo nivel é mais facil de fazer no nativo (kotlin)

custo é mais barato (1 time só)
mas mesmo assim empresar preferem ter 2 times, em startup geralmente vai para uma solução hibrida

------------------------------------------------------
A02-020521
no dart temos um main por projeto
java o main é uma metodo estatico e recebe parametro 
no dart nos metodos nao precisamos declarar o retorno
e o underlaine é o que significa se o metodo é privado ou não 
2 notificadores de acesso no dart publico e privado 

void main() {
    for (int i = 0; o < 5; i++){
        printInteiro(i);
    }
}
printInteiro(int numero){
    print('O numero é:$numero.');
}

String nome = 'Valor';
var n2 = 'v1';
var n3 - 10;
dynamic nd = 'String'

dynamic aceita qualquer tipo, permite ficar atribuindo varios tipos de valores, ja o var não

é mais comum ter o var 
em java sempre temos que tipar as variaveis

void main() {
    int salario; // em java não conseguiriamos pois, teriamos q atribuir um valor 
    if(salario == null) {
        print('É nulo');
    } else {
        print('Não é nulo');
    }
}

10.[conseguimos acessos propriedades e metodos, pq o 10 é um obj]
''. string tambem 
tudo é tratado como obj no dart 

varTypes 
numbers 
strings
booleans 
lists
sets
maps
runes(usado em expressões  Unicode)
Symbols (usado para buscar classes ou bibliotecas por strings)(cuidado por gera uma grande carga no apps)

// String to int
var valorInteiro = int.parse('1');var variavel = 'Um valor qualquer';

// String to double
var valorDecimal = double.parse('1.1');var s1 = 'Concatenação '
'de springs '
"funciona em várias linhas .";

// Int to String
String stringNumero = 1.toString();var s2 = 'A concatenção com + ' + 'funciona
dessa forma tb, ${variavel}.';

// Double do String converte e fixa casas decimais 
String numeroPI = 3.14159.toStringAsFixed(3);

String s1 = 'S1';
String s2 = 'S2';
String s3 = 'S3.1'
            's3.2'
            's3.3'; //adotar sempre aspas simples ate o final

print(s3);

String s4 = s1 + '';
String s4 = 'Valor total: $s1 $s2 $s3'
print(s4);

String s4 = s1 + ' ' + s2; // não usar

//podemos fazer uma operação dentro das chaves
String s4 = 'Valor total: $s1 $s2 $s3 ${3 + 10}'

String s5 = ''' Flavio 
                Moreni
                Fiap
                2021
                flutter'''; //imprime literal 
print(s5)

Lists 

// declarando a lista

// Adicionando o conteudo de 1 no final de 2
var list2 = [0,10,11, ...?list]; // ...? palavra reservada, para copiar os valores 

// Adicionando o conteúdo de 2 no início de 3
var list3 = [...?list2, 20, 21, 22]; // copia da lista 2, com outra parcela que inputamos 


// Adicionando mais um valor em 3
list3.add(25); //metodo add que temos para adicionar o elemento

bool permiteUva = true;

var lista = [
'Banana',
'Maça' ,
'Pera',
if(permiteUva) 'Uva'
]; // adicionando uma condição dentro da lista. usando na declaração da lista, para ter o valor

FUNCTIONS

// retorno explícito, definindo o retorno bool
bool ehImpar(int numero) {
    return numero.isOdd;
}
// retorno implícito
ehOdd(int numero) {
    return numero.isOdd;
}

ARROW FUNCTIONS 
// retorno explícito
bool numeroImpar(int numero) => numero.isOdd;

// retorno implícito
numImpart(int numero) => numero.isOdd;

quando o retorno é uma chave só. Usando tambem em kotlin

PARAMETROS OPCIONAIS 

//forma comum em java, sendo o parametro opcional
printInteger(int aNumber) {
    print(aNumber);
}
printInteger(int a, int b) //sobrecarga de metodo e dart nao tem sobrecarga de metodo, ele deixa os parametros opcionais 

//dart permite um metodo com varios parametros opcionais
//sempre definimos entre chaves quais os parametros opcionais
//
printInteger(int a, {int b}) {
    print('$a $b');
}

main() {
    int number = 42;
    //printInteger(aNumber: number);
    //printInteger();
    //printIntenger(number, 10); // Erro de compilação
    printIntenger(number, b:2); // Passando o segundo parametro
    printInteger(a:2,b:3);//passando os parametros opcionais 
    printIntenger()//nenhum parametro opcional 
}


label({String borda, String background}) {
    print($borda $background);
}

main() {
    int number = 42;
    //printInteger(aNumber: number);
    //printInteger();
    printIntenger(number); // Erro de compilação
}

//Segunda forma de passar parametros opcionais
usamos chaves quando precisamos passar os parametros dentro da chaves de forma a forçar que não há possibilidade de passar 1 parametro so 
printNome(String primeiro,[String segundo, String sobrenome]) {
    print('$primeiro $segundo $sobrenome');
}

main(){
    printNome("Flavio");
    printNome("Flavio", "Eduardo");
    printNome("Flavio", "Eduardo", "Moreni");
}
//definindo um valor default para o parametro opcional para o valor não ficar nulo quando não passamos nada no valor

printNome(String primeiro, {String segundo = 'Flutter'}) {
    print($primeiro $segundo);
}
main() {
    String nome = 'Flutter'
    printNome('Flavio');
}

void main(){
   var frutas = ['maça', 'banana', 'laranja'];
   frutas.forEach((nome){
     print(nome)
   });
}
//função privada 
_funcaotest(){

}
CLASSES 

class Point {
  int x, y;

  
//   // Sintaxe para setar x e y
//   Point(this.x , this.y);
//     this.x = x;
//     this.y = y;
// }
 // Sintaxe para setar x e y e tambem podemos passar parametros opcionais
  Point({this.x , this.y});
  
  // Named cosntructor, podemos ter um constructor diferente com o nome da classe
  Point.fromJson(String conteudoJson){
    //Parse;
  }
}

void main() {
  Point p = new Point();

  Point p2 = new Point.fromJson("ahsdjnaksjd")
}

void main() {
  var p1 = new Person(); // Erro de compilação
  var p2 = Pessoa.fromJson("{valor: 'texto'}");
}

class Pessoa {
  String nome;
  Pessoa.fromJson(String jsonContent) {
  print('executou o fromJson de Pessoa');
}
------------------------------------------------------
A03 StatelessWidget Widget MaterialApp Demais Widgets

StatelessWidget widget sem estado (conteudo dele não sofre alteração) sem estado, stateless O
stateful (muda o estado)
stateless tem movimento porem não conseguimos carregar ele (load)
stateless é tipo de widget 
materialApp é um widget tambem
no dart criamos um projeto flutter
pag 7 pegar o cod

lista de widget 
cupertino sao elementos no padrao ios 
flutter doc > widget catalog

Card
sempre importa o package:flutter/material.dart
runApp() //fica dentro do main, e o runApp processa os widgets ou o flutter, passando como parametro a tela, ou a classe que tem a tela 

class Myapp extends StatelessWidget // é uma classe que extend do full ou stateless 

// criando uma tela 2 
class Tela2 extends StatelessWidget // assim que começamos a criar a tela
//quando extendemos da classe StatelessWidget somo forçados a escrever o metodo build 

Widget build(BuildContext context) // BuildContext (classe)

// classe que cria o App
class MyApp extends StatelessWidget {
  // Primeiro método a ser executado
  @override
  Widget build(BuildContext context) {
  // Criando o Widget do Material App e um Texto Olá
  return MaterialApp(home: Text("Hello, Fiap Flutter"),);
  }
}

MaterialApp tem varios parametros, locale geo, routes
MaterialApp é só um esqueleto, onde passamos o parametro home
o home indica qual elemento visual que vai ser renderizado


Criamos uma classe que vai renderizar a tela, ela extende do statelessWidget, temos que sobrescrever o metodo build, retornando um widget que no caso é o materialApp
Stateless sempre tem o metodo build e ele retorna os elementos
Text o primeiro elemento é umas string de dados, que é obrigatorio

temos um catalogo de widget
column não é um elemento visual, mas ajuda empilhar os elementos
acessando  o Widget catalog

Melhorando 

return MaterialApp(
  home: Card(
    child: Text(
      "Hello, Fiap Flutter",
      textAlign: TextAlign.center, //TextAlign é uma constante
      style: TextStyle(
      fontSize: 40,
      ),
    ),
  ),
);

passamos o parametro pro home colocamos null ate colocarmos algum card
é importante definirmo o child do widget para informarmos um texto dentro do widget principal
na hora que construimos o card precisamos passar qual elemento vai estar dentro do card, não conseguimos passar o Text diretamente para o Card, pois ele o parametro que temos para passar o elemento que vai dentro do Card é child: Text('Olá')
a virgula é importante dentro do parametro para quando formatamos o codigo ele deixa um pouco mais organizado
o child é singular, então só podemos ter um elemento dentro


ListTile

MaterialApp(
      home: Card(
        child: ListTile(
          title: Text(
            '9999 Super Street',
            style: TextStyle(fontWeight: FontWeight.w500),
          ),
          subtitle: Text('Name City, EST 99999'),
          leading: Icon(
            Icons.restaurant_menu,
            color: Colors.blue[500],
          ),
        ),
      ),
    );

Listtile permite um espaço do lado esquerdo, (lading), permite um title e ele permite um subtitle, e um espaço  

child: ListTile(
  title: Text(
    '9999 Super Street',
    style: TextStyle(fontWeight: FontWeight.w500),
    ),
    subtitle: Text('Name City, EST 99999'),
    leading: Icon(
      Icons.restaurant_menu,
        color: Colors.blue[500],
        ),
    ),

//leading: parameter a esquerda do listtile
//trailing: parameter a direita do listtile
//title: 
//subtitle: 
podemos passar um texto para cada parametro do listtile
leading: Icon(Icon.restaurant_menu, color: Colors.blue),
title: Text('999 St domingues'),
subtitle: Text("Vancouver, British Columbia, 99999"),
trailing: Text("n4"),
trailing: Icon(Icon.arrow_forward, color: Colors.redAccent),

child: Column() //permite empilhar varios elementos
o child recebe um unico elemento dentro do widget
dentro do column podemos colocar dois Listtile
dentro do column temos varios parametros e dentro desse parametro 
temos o List<Widget> children = const <Widget>[]
o children é um propriedade ou parametro que recebe uma lista de widgets
se quisermos empilhar os card inverteriamos, ao invés de colocar os listTile

para fazer o evelopamento do um card o listtile, podemos clicar com o botao direito e wrap e ele seta dentro column

Widget cardRestaurant(String adress, String city, String phone){
}
class MyApp2 extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      home: Card(
        child: new CardRestaurant('999, st richards, 'Vancouveers, Bc, 99999', '55(11) 99999-44222')
    );
  }
}

Widget cardRestaurant(String adress, String city, String phone){
   return Column(children: [
            ListTile(
              title: Text(
                adress,
                style: TextStyle(fontWeight: FontWeight.w500),
              ),
              subtitle: Text(city),
              leading: Icon(
                Icons.restaurant_menu,
                color: Colors.blue[500],
              ),
            ),
            ListTile(
              title: Text(
                phone,
                style: TextStyle(fontWeight: FontWeight.w500),
              ),
              subtitle: Text('Name City, EST 99999'),
              leading: Icon(
                Icons.restaurant_menu,
                color: Colors.blue[500],
              ),
            ),
          ],
        ),
      );
}

class CardRestaurant extends StatelessWidget {
  String adress,city, phone;

  CardRestaurant(this.adress, this.city, this.phone);

  Widget build(BuildContext context){
    return return Column(children: [
            ListTile(
              title: Text(
                adress,
                style: TextStyle(fontWeight: FontWeight.w500),
              ),
              subtitle: Text(city),
              leading: Icon(
                Icons.restaurant_menu,
                color: Colors.blue[500],
              ),
            ),
            Divider(),
            ListTile(
              title: Text(
                phone,
                style: TextStyle(fontWeight: FontWeight.w500),
              ),
              subtitle: Text('Name City, EST 99999'),
              leading: Icon(
                Icons.restaurant_menu,
                color: Colors.blue[500],
              ),
            ),
          ],
        ),
      );
  }
}

podemos tanto chamar um metodo como chamar uma classe como descrito acima, instaciamos o new para a nova classe ou chamamos o metodo que construimos para retornar o widget

O widget divider é usado para colocar uma linha e dividir
o column é uma lista de widget, ele permite colocar um listtile(), divider() 
column vai aceitando qualquer widget
sizedBox() é um elemento visual que envolve o Card(),


class MyApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      home: new CardRestaurant('999, st richards, 'Vancouver, Bc, 99999', '55(11) 99999-44222')
    );
  }
}

class CardRestaurant extends StatelessWidget {
  String adress,city, phone;

  CardRestaurant(this.adress, this.city, this.phone);

  Widget build(BuildContext context){
    return SizedBox(
      height: 210,
      child: Card(
        child: Column(children: [
            ListTile(
              title: Text(
                adress,
                style: TextStyle(fontWeight: FontWeight.w500),
              ),
              subtitle: Text(city),
              leading: Icon(
                Icons.restaurant_menu,
                color: Colors.blue[500],
              ),
            ),
            Divider(),
            ListTile(
              title: Text(
                phone,
                style: TextStyle(fontWeight: FontWeight.w500),
              ),
              subtitle: Text('Name City, EST 99999'),
              leading: Icon(
                Icons.restaurant_menu,
                color: Colors.blue[500],
              ),
            ),
          ],
        ),
      )
    );
  }



class MyApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      home: Column(
        children: [
         new CardRestaurant('999, st richards, 'Vancouver, Bc, 99999', '55(11) 99999-44222'
         ),
         new CardRestaurant('999, st richards, 'Vancouver, Bc, 99999', '55(11) 99999-44222'),
        ],
      )
    );
  }
}

class CardRestaurant extends StatelessWidget {
  String adress,city, phone;

  CardRestaurant(this.adress, this.city, this.phone);

  Widget build(BuildContext context){
    return SizedBox(
      height: 210,
      child: Card(
        child: Column(children: [
            ListTile(
              title: Text(
                adress,
                style: TextStyle(fontWeight: FontWeight.w500),
              ),
              subtitle: Text(city),
              leading: Icon(
                Icons.restaurant_menu,
                color: Colors.blue[500],
              ),
            ),
            Divider(),
            ListTile(
              title: Text(
                phone,
                style: TextStyle(fontWeight: FontWeight.w500),
              ),
              subtitle: Text('Name City, EST 99999'),
              leading: Icon(
                Icons.restaurant_menu,
                color: Colors.blue[500],
              ),
            ),
          ],
        ),
      )
    );
  }
------------------------------------------------------
A04-030521

MaterialApp 
Scaffold // nao tem visual 
container // não tem visual
card 
column 

Scaffold 
  implementa a estrutura de layout visual 
  do design
  permite organizar melhor os elementos visuais 


Container é caixa para org melhor os elements, e podemos colocar um filho no container que no caso é o Card ListView é um dos elementos mais usados, no flutter é normal ter um elemento dentro do outro 
21 linhas para fazer 3 textos como no exemplo abaixo 

exemplo de codigo hadoken

children: [
                  Text(
                    "Diego",
                    style: TextStyle(
                      color: Colors.red,
                      fontSize: 30,
                      fontStyle: FontStyle.italic,
                    ),
                  ),
                  Text(
                    "José",
                    style: TextStyle(
                      color: Colors.blueGrey,
                      fontSize: 30,
                      fontStyle: FontStyle.italic,
                    ),
                  ),
                  Text(
                    "Pedro",
                    style: TextStyle(
                      color: Colors.greenAccent,
                      fontSize: 30,
                      fontStyle: FontStyle.italic,
                    ),
                  ),
                  Text(
                    "Mateus",
                    style: TextStyle(
                      color: Colors.pinkAccent,
                      fontSize: 30,
                      fontStyle: FontStyle.italic,
                    ),
                  ),
                ],
              )

Metodo vs Class 
uma classe é um widget no flutter, criamos um widget que é o widget de texto, podemos criar uma classe dentro do mesmo arquivo no flutter 
o metodo build toda vez que é chamado ele retorna o widget de texto

class TextCustomized extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return Text(
      "Mateus",
      style: TextStyle(
        color: Colors.pinkAccent,
        fontSize: 30,
        fontStyle: FontStyle.italic,
      ),
    );
  }
}

//nesse caso precisamos fazer ele ser dinamico,

class TextCustomized extends StatelessWidget {
  String value;

  TextCustomized(this.value);

  @override
  Widget build(BuildContext context) {
    return Text(
      value,
      style: TextStyle(
        color: Colors.pinkAccent,
        fontSize: 30,
        fontStyle: FontStyle.italic,
      ),
    );
  }
}

quando queremos mudar o valor, no flutter nao temos geters and seters 

void setValue(String content){
  value = content;
}
quando o elemento é stateLess uma vez renderizado ele não vai ser mais alterado, stateless estamos trabalhando com a memoria visual, 

então umas das formas de refatorar o cod, é construindo uma classe que extende statelessWidget, podendo usar ele como um proprio widget do flutter como no cod abaixo 

lass TextCustomized extends StatelessWidget {
  String value;

  TextCustomized(this.value);

  @override
  Widget build(BuildContext context) {
    return Text(
      value,
      style: TextStyle(
        color: Colors.pinkAccent,
        fontSize: 30,
        fontStyle: FontStyle.italic,
      ),
    );
  }
}

function(método)
é uma outra forma de refatorar o cod
então podemos criar um método dentro da classe Myapp(principal até o momento) 

Widget textBox(String param) {
    return Text(
      param,
      style: TextStyle(
        color: Colors.deepOrangeAccent,
        fontSize: 30,
        fontStyle: FontStyle.normal,
        fontWeight: FontWeight.w100,
      ),
    );
  }
}

então quando eu uso o método ou uma classe para refatorar o codigo. 
QUANDO FALAMOS DE WIDGET NA CLASSE, TEMOS APENAS UM MÉTODO EM TODA A  CLASSE, O MÉTODO BUILD. Se quisermos ter mais métodos teriamos que criar outra classe, ou colocando mais parametros na construção daquele widget

CLASSE x METODO QUANDO USAR????
a classe é util para fazer reuso, pois conseguimos utilizar em varias telas. Então quando queremos usar uma tela (widget) em varios lugares do app, usamos uma classe

o metodo serve só para usar dentro daquele escopo, até porque ele fica no escopo daquela determinada classe onde o método se encontra. Então quando temos uma tela, e queremos diminuir o cod, fazemos a refatoração ali, para um bloco de metodo para diminuir e organizar 

podemos selecionar o Text e fazer o refactor, temos 3 tipos de extração, e extraimos o texto para um metodo, ou pra uma classe


------------------------------------------------------
A05-040521

o hotreload funciona quando eu salvo meu arquivo 

crtl + s (hotreload)
quando temos mudanças muito grandes o hotrelod não funciona
o botao restart restarta a aplicação do zero,

aprofundamento do Scaffold
stateful Widget // mudança de patamar

Componentes MaterialApp

Scaffold implementa a estrutura de laoyout visual

dentro do MaterialApp o elemento principal vai ser o Scaffold

o esqueleto do Scaffold 

Scaffold(
        appBar: null,
        body: null,
        floatingActionButton: null,
        drawer: null,
        persistentFooterButtons: [],
        bottomNavigationBar: null,
        endDrawer: null,
      ),

os demais widgets são widgets de visualização do usuario
existem duas maneiras de codar

criando o metodo 
Widget _appBar() {
    return AppBar(
      title: Text('Diego Scaffold'),
    );
  }

ou usando atalho
PARA PENSAR, QUANDO IMPORTAMOS UMA CLASSE, CARREGAMOS OS METODOS DELES SEM MESMO ESTAREM INSTACIADOS. IGUAL NO FLUTTER?

FloatingActionButton
no atributo onPressed aceita uma função como parametro
e podemos fazer uma função anonima como abaixo 

FloatingActionButton _floatingActionButton() {
    return FloatingActionButton(
      elevation: 10,
      child: Icon(Icons.add),
      onPressed: () {
        print('_floatingActionButton');
      },
    );
  }

dentro do onpressed iremos programar coisas mais complexas 
quando retornamos um array o retorno dele vira uma List de Widgets 

List<Widget> _persistentFooterButtons() {
    return [
        RaisedButton(
          elevation: 10.0,
          color: Colors.green,
          child: Icon(Icons.add),
          onPressed: () {
            print('+');
          },
        ),
        RaisedButton(
          elevation: 10.0,
          color: Colors.red,
          child: Icon(Icons.remove_circle),
          onPressed: () {
            print('+');
          },
        ),
      ];
  }

para pensar: QUANDO IMPORTAMOS UMA CLASSE, PODEMOS UTILIZAR OS METODOS ESTATICOS DELA???


currentIndex: 0, nos fala qual botão que está selecionado na barra de navegação
items: [] os itens de opção da barra de navegação

bottomNavigationBar: BottomNavigationBar(
          currentIndex: 1,
          fixedColor: Colors.teal,
          items: [
            BottomNavigationBarItem(
              icon: Icon(Icons.home),
              title: Text('home'),
            ),
            BottomNavigationBarItem(
              icon: Icon(Icons.search),
              title: Text('Search'),
            ),
            BottomNavigationBarItem(
              icon: Icon(Icons.add_box),
              title: Text('Add'),
            ),
          ],
        ),
o currentIndex representa o array de itens, selecionado o atual

eu não tenho eventos nos botões eu tenho eventos na minha barra de navegação como um todo, como descrito abaixo
onTap é cara que recebe o click na barra de navegação 
BottomNavigationBar(), eu sei o item que eu cliquei pelo parametro que é passado pelo value
quando queremos navegar pelas telas podemos fazer uma condicional no onTap, ele aceita uma função 

o ontap é executado quando eu toco o botão 
o onpressed é quando eu toco e solto do botao


 BottomNavigationBar(
          currentIndex: 1,
          fixedColor: Colors.teal,
          items: [
            BottomNavigationBarItem(
              icon: Icon(Icons.home),
              title: Text('home'),
            ),
            BottomNavigationBarItem(
              icon: Icon(Icons.search),
              title: Text('Search'),
            ),
            BottomNavigationBarItem(
              icon: Icon(Icons.add_box),
              title: Text('Add'),
            ),
          ],
          onTap: (value) {
            print('Botão clicado $value');
          },
        )

para estudar o metodo drawer

STATELESSWIDGET NAO ALTERA, NÃO MUDA O QUE FOI RENDERIZADO UMA VEZ, NÃO RECEBE MAIS ITENS

STATEFUL COMPONENTES QUE POSSUEM ESTADO

StatelessWidget flutter logo, fica ate o final da vida

statefulwidget galeria de fotos (conforme eu tiro uma foto eu vou aumentando ou diminuindo)
precisamos fazer com que ele se atualize conforme a ação do usuário
instagram (quando puxamos pra baixo ele atualiza o history)

como criar um statefulwidget?
no statelessWidget (minhaclasse extends StatelessWidget e metodo build)

no STATEFUL SEMPRE SÃO DUAS CLASSES PARA CRIAR ELE 
a classe StatefulWidget e a State
se tentarmos fazer na mão da pau 
pq uma depende da outra 

criamos a classe StatefulWidget e somos obrigados a criar o metodo createState(), só que esse metod ele vai retornar a classe State 

a minha classe StatefulWidget RETORNA minha classe State
eu uso a stateful, para instanciar a pagina, para fazer uma relação com ela 

Meus elementos graficos eu codifico na classe State
e ela tem um metodo build

o ponto mais importante do StatefulWidget é metodo setState() {}, ele notifica o app que algum obj foi alterado, quando eu quero que algo mude na tela eu chamo o metodo setState()

setState() é quando eu preciso mudar o estado
PARA APRENDER:quando que colocamos uma função sem ()
PARA APRENDER: metodos que retorno classe

o statelessWidget não permite que mude a tela, sem estado (travado), renderizou uma vez, ele só sai ate sair da memória

é melhor criar tudo como stateful? tem coisas que não precisamos alterar nunca, e usando o stateful estarei usando recurso que não vou utilizar, deixando o app um pouco mais parrudo

void _incrementCounter() {
    setState(() {
      _counter++;
      print("Contador $_counter");
    });
  }

o setState notifica a tela dizendo que ela sofreu uma alteração e quando ele notifica, o metodo build é recarregado, dando então dinamismo a tela
sendo o metodo build reexcutado, ele vai renderizando suavemente o metodo build, não dando pra perceber a mudança do conteudo da pagina

o problema que podemos ter com estado, é executar o metodo build varias vezes, tendo ele que reconstruir varios componentes (Scaffold, AppBar, Column...)


------------------------------------------------------
A06-040521 LISTVIEW VSCODE

nac projeto, ele pede um pouco a mais do que ele pediu
no projeto ele pedi coisas a mais, ele vai pedir coisas como visual, app de raças de cachorro, pegar o modelo de aula

conteudo da aula é os segredos do Flavio

// StatefulWidget
//create
//
//State<Class-StatefulWidget>
//build

como construir os apps, com elementos visuais MaterialApp dentro dele o Scaffold
o Scaffold é utilizado para organizar as coisas

o ListView lembra o Column, sendo o elemento para empilhar os elementos 

Column > não conseguimos fazer associação de dados, com cargas automaticas ou dinamicas de dados.

ListView > pode ser dinamica 
children é uma coleção de obj
o ListView ja tem o Scroll automatico

digitar stf cria o ful 
quando clicamos no botao do flutter conseguimos saber a composição dos widgets

new ListTile(
          leading: null,
          trailing: null,
          title: null,
          subtitle: null,
        )

todos os parametros que passamos são do constructor

subtitle: LinearProgressIndicator(
            backgroundColor: Colors.redAccent,
            valueColor:
                AlwaysStoppedAnimation(Colors.greenAccent), //cor preenchida
            value: 0.25, //quanto que a barra progrediu
          ),

para lembrar: podemos instanciar um obj, sem guardar em uma variavel, e no flutter não precisamos do new
------------------------------------------------------
A07-050521 Estrutura do Projeto, ListView Builder

components - elementos visuais pequenos que podem ser restilizados, botao(que recebe o mesmo padrão pro app inteiro)

screens - pode englobar junto com os components (screen são as telas, telas inteiras)
models - classes que representam os dados do projeto, tambem chamados de entidades 

Services - confusão com repository e services(nomeclatura), flutter vamos configurar as chamadas a serviços externos, chamadas as webservices e apps

repository - Dao(que fazia a interação com bd, no java) - não acessar um banco dados direto do app, pode gerar problemas - dificilmente ele vai acessar diretamente um banco de dados, ele sempre vai acessar um service, webservice ou apis. Sqlite é um banco em memória (banco local, só daquele dispositivo, não temos informação compartilhada)

Themes - o padrão visual do app, (aplicativo de gps tema pro dia e pra noite)

ListView Builder
ListView.Builder() // constructor nomeado, usado para exibir uma lista com elementos infinito ou dinamicos

nome de arquivo no dart é tudo em minusculo

class CursoRepository {
  List<CursoModel> findAll() {
    return null;
  } //o findAll é nosso select All, ele retorna todos os cursos então ele retorna uma Lista de objetos,uma lista de CursoModel

  void findById(int id) {}

  void insert() {}

  void update() {}

  void delete() {}
}

get and set são não classe model
 data axis object  DAO
fazemos select, insert, update e delete no bd
classe Repository tem metodos que fazem interação como o db
o findAll é nosso select All
 o findById, queremos o detalhes passamos o Id e temos as informações de fato

material traz mais opções, cuppertino traz coisas próprias do android

import 'package:app07/models/curso_model.dart';

class CursoRepository {
  List<CursoModel> findAll() {
    var lista = [
      new CursoModel(
          id: 1,
          nome: 'Java',
          nivel: 'básico',
          percentualConclusao: 99,
          preco: 1000),
      new CursoModel(
          id: 2,
          nome: 'JEE',
          nivel: 'avançado',
          percentualConclusao: 99,
          preco: 1000),
    ];
    return lista;
  } //o findAll é nosso select All, ele retorna todos os cursos então ele retorna uma Lista de objetos,uma lista de CursoModel

  CursoModel findById(int id) {
    return null;
  } // temos os que como resposta da funcão? como retorno?

  void insert(
      CursoModel
          cursoModel) {} //o que precisamos enviar? então temos que passar algo como parametro

  void update(CursoModel cursoModel) {}

  void
      delete() {} //aqui não temos o trabalho de ter ou enviar um obj para deleter, então enviamos somente o id
}

get and set são não classe model
 data axis object  DAO
fazemos select, insert, update e delete no bd
classe Repository tem metodos que fazem interação como o db
o findAll é nosso select All
 o findById, queremos o detalhes passamos o Id e temos as informações de fato
O visual studio code identifica a classe e faz o import sozinho
 No java não temos duas classes no mesmo arquivo

 // listTileCurso(cursoModel),
          // listTileCurso(cursoModel),
          // listTileCurso(cursoModel),
          listTileCurso(
            CursoModel(
                id: 2,
                nome: 'Gabriela',
                percentualConclusao: 0.66,
                preco: 1000,
                nivel: 'expert'),
          ),
          listTileCurso(
            CursoModel(
                id: 2,
                nome: 'BROKAAOOOOOOOO',
                percentualConclusao: 0.99,
                preco: 1000,
                nivel: 'expert'),


/*
 <table> 
   <% for (int i = 0; i < listaCursos.leght; i++){
     CursoModel cmodel = listaCursos[i];
     %>
     <tr>
      <td><%= cmodel.nome %></td>
      <td><% cmodel.preco %></td>
      </tr>
    <% } %>
  <table>



  body: ListView(
        children: [
          for (int i = 0; i < listaCursos.leght; i++){
            CursoModel cmodel = listaCursos[i];
            listTileCurso(cmodel);
     }
        ],
      )

*/

quando estamos no html, a renderização vai acontecendo linha a linha 
nesse modelo do ListView acima não funciona com o for dentro dele, quando executa o flutter entende que precisa ter um elemento visual criado, o ListView, ele não vai esperar um laço para ir criando um ListView, e depois renderizar o ListView, já deve estar pronto

por isso usamos o elemento ListView Builder, vai permitir eu passar uma lista para dentro ListView, ele automaticamente vai fazer essa interação, renderizando a lista

criação do ListView.builder
ListView.builder(
        itemBuilder: null,
        itemCount: null, 
      ),

itemCount passamos o tamanho da lista
itemBuilder recebe uma função, podendo ser anonima, ele executa a função como se fosse um for

class CursoRepository {
  List<CursoModel> findAll() {
    var lista = [
      new CursoModel(
          id: 1,
          nome: 'Java',
          nivel: 'básico',
          percentualConclusao: 0.719,
          preco: 1000),
      new CursoModel(
          id: 2,
          nome: 'JEE',
          nivel: 'avançado',
          percentualConclusao: 0.712,
          preco: 1000),
      new CursoModel(
          id: 3,
          nome: 'Flutter',
          nivel: 'avançado',
          percentualConclusao: 0.5,
          preco: 1000),
    ];
    return lista;
  } //o findAll é nosso select All, ele retorna todos os cursos então ele retorna uma Lista de objetos,uma lista de CursoModel

  CursoModel findById(int id) {
    return null;
  } // temos os que como resposta da funcão? como retorno?

  void insert(
      CursoModel
          cursoModel) {} //o que precisamos enviar? então temos que passar algo como parametro

  void update(CursoModel cursoModel) {}

  void
      delete() {} //aqui não temos o trabalho de ter ou enviar um obj para deleter, então enviamos somente o id
}

//get and set são não classe model
// data axis object  DAO
//fazemos select, insert, update e delete no bd
//classe Repository tem metodos que fazem interação como o db
//o findAll é nosso select All
// o findById, queremos o detalhes passamos o Id e temos as informações de fato
//O visual studio code identifica a classe e faz o import sozinho
// No java não temos duas classes no mesmo arquivo

------------------------------------------------------
A08-060521 Future, Async e Await, Trabalhando com dados assícronos, Future builder

async – adicionado antes do corpo da função definirá
que o comportamento será assíncrono.
final da declaração da function, que pode funcionar de forma async 


await – pode ser chamado apenas em funções
assíncronas, e determina que a próxima linha de código
será executada após o término da instrução await.
quando eu vou chamar uma function que é async para que eu pare a exec, para que a proxima linha seja exec 

Future – recurso para tratamento de tarefas de longa
duração funcione de forma assíncrona.
ajuda a tratar tarefas async longas, quando demora, para saber se acabou ou se esta em exec

o que é sincrono, exec uma coisa por vez em sequencia

o que é async, eu mado exec algo e eu não paro o prox linha em exec, e em sequencia ja exec a prox linha. Eu não dependo do result. Exec a primeira linha e exec a segunda sem precisar da resposta da primeira, ele pode ter terminado, pode estar em exec. Não travamos a thread

quando precisamos de coisas async como conseguimos controlar para não perder a exec 

future.delayded é um atraso(como se fosse um contador) 

Sincrona 
print1() {
void main() {
print(1.toString());print1();
print(1.toString());print2();
print(1.toString());print3();
}
}
print2() {
print(2.toString());
print(2.toString());
print(2.toString());
}
print3() {
print(3.toString());
print(3.toString());
print(3.toString());
}

Para implementarmos o await precisamos de uma função assincrona, o bloco de cod. 
O await só pula pra proxima linha de exec quando minha thread terminar

print1() async {
  await Future.delayed(Duration(seconds: 5), () {
    print('auditoria');
  }); //linha assincrona
  print(11.toString()); //para exec a linha 13 preciso, da exec da linha 10. Toda vez que eu tenho um metodo que é async o meu retorno vai precisar ser uma future.Quem chamar o  print1 tem o poder de gerenciar em que pé esta a exec 

O metodo print1 se tornando async, exec em parelo, enquanto da seguimento nas proximas linhas de exec


void main(List<String> arguments) {
  print1();
  print2();
  print3();
}

Future<void> print1() async {
  await Future.delayed(Duration(seconds: 5), () {
    print('auditoria');
  }); //linha assincrona
  print(11.toString()); //para exec a linha 13 preciso, da exec da linha 10

Models -> classe onde temos a entidade do negocio, atributos e geters and seters

Repository -> Onde guardamos nossos dados, o metodo findAll(), busca todos os objetos e guarda os obj da classe Models(Entity), o metodo findById() busca o objeto especifico pelo id. E temos os metodo insert(), update() e delete()

flutter clean // remove os compilados
flutter pub get // traz os pkgs do projeto, e as lib que estão quebrando 

primeira coisa quando baixamos um arquivo de fora fazemos o flutter pub get 

quando queremos enviar o projeto para alguem, limpamos ele, então flutter clean

class Database {
  bool created = false;

  Future<bool> createDatabase() async {
    await Future.delayed(Duration(seconds: 5));
    this.created = true; // fake
    return created;
  }
}
metodo assicrono acima

58:00
------------------------------------------------------
------------------------------------------------------
------------------------------------------------------
------------------------------------------------------
------------------------------------------------------
------------------------------------------------------
------------------------------------------------------
------------------------------------------------------
------------------------------------------------------
------------------------------------------------------
------------------------------------------------------
------------------------------------------------------
------------------------------------------------------
